/**
 * This Library was originally written by Olivier Van den Eede (4ilo) in 2016.
 * Some refactoring was done and SPI support was added by Aleksander Alekseev (afiskon) in 2018.
 *
 * https://github.com/afiskon/stm32-ssd1306
 */

#ifndef __SSD1306_H__
#define __SSD1306_H__

#include <stddef.h>
#include <stdint.h>
#include <_ansi.h>
#include "stm32f1xx_hal.h"
_BEGIN_STD_C

//Конфигурация I2C
#define SSD1306_I2C_PORT        hi2c1
#define SSD1306_I2C_ADDR        (0x3C << 1)
extern I2C_HandleTypeDef SSD1306_I2C_PORT;

// Если нужну зеркальное отображенние
//#define SSD1306_MIRROR_VERT
//#define SSD1306_MIRROR_HORIZ

// Если нужна инверсия цвета
//#define SSD1306_INVERSE_COLOR

// Включаем нужные шрифты
#define SSD1306_INCLUDE_FONT_6x8
#define SSD1306_INCLUDE_FONT_7x10
#define SSD1306_INCLUDE_FONT_11x18
//#define SSD1306_INCLUDE_FONT_16x26
//#define SSD1306_INCLUDE_FONT_16x24
//#define SSD1306_INCLUDE_FONT_16x15

// Отступы от краев дисплея
#ifdef SSD1306_X_OFFSET
#define SSD1306_X_OFFSET_LOWER (SSD1306_X_OFFSET & 0x0F)
#define SSD1306_X_OFFSET_UPPER ((SSD1306_X_OFFSET >> 4) & 0x07)
#else
#define SSD1306_X_OFFSET_LOWER 0
#define SSD1306_X_OFFSET_UPPER 0
#endif


// SSD1306 OLED Высота
#ifndef SSD1306_HEIGHT
#define SSD1306_HEIGHT          32
#endif

// SSD1306 Ширина
#ifndef SSD1306_WIDTH
#define SSD1306_WIDTH           128
#endif

// Определяем размер буффера для дисплея
#ifndef SSD1306_BUFFER_SIZE
#define SSD1306_BUFFER_SIZE   SSD1306_WIDTH * SSD1306_HEIGHT / 8
#endif


typedef enum {
    Black = 0x00, // Пикслели выключен
    White = 0x01  // Пиксель включен
} SSD1306_COLOR;

typedef enum {
    SSD1306_OK = 0x00,
    SSD1306_ERR = 0x01
} SSD1306_Error_t;

// Структура для хранения текущего состояния дисплея
typedef struct {
    uint16_t CurrentX;
    uint16_t CurrentY;
    uint8_t Initialized;
    uint8_t DisplayOn;
} SSD1306_t;

typedef struct {
    uint8_t x;
    uint8_t y;
} SSD1306_VERTEX;

/** Структура с параметрамми Шрифта */
typedef struct {
	const uint8_t width;                /**< Ширина */
	const uint8_t height;               /**< Высота */
	const uint16_t *const data;         /**< Указатель на массив данных шрифта */
    const uint8_t *const char_width;    /**< Пропорциональная ширина символа в пикселях ((NULL for monospaced) */
} SSD1306_Font_t;

// Логотив ГРАНИТ
static const uint8_t logo[]={
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x66, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x11, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x88, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff,	0xff, 0xff, 0xff, 0xff, 0xe8, 0x84, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff,	0xff, 0xff, 0xa8, 0x83, 0xb9, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x48, 0x47, 0x31, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x48, 0x5d, 0x61, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x48, 0x71, 0xe1, 0x9d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xe1, 0xb1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xe8, 0x24, 0x61, 0xe1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x88, 0x20, 0x66, 0x61, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x8c, 0x03, 0xfc, 0x61, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x84, 0x3d, 0x60, 0x63, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x90, 0xf1, 0xf0, 0x27, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xc7, 0x5f, 0x98, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x1c, 0xf8, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x79, 0xc0, 0x37, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xf9,	0xcf, 0x04, 0x11, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0x38, 0x24, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xce, 0xe1, 0x03, 0x92, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xbb, 0x80, 0x8e, 0x12, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xee, 0x38, 0xf2, 0x12, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xd9,	0x88, 0xc1, 0x15, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xb7, 0xc5, 0xa1, 0x15, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0x31, 0x9b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf5, 0x98, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xe4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xff,	0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };

// Объявление функций
void ssd1306_Init(void);
void ssd1306_Fill(SSD1306_COLOR color);
void ssd1306_UpdateScreen(void);
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color);
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color);
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color);
void ssd1306_SetCursor(uint8_t x, uint8_t y);
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color);
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color);
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color);

/*
x1 Кордината по оси Х от верхнего левого угла
у1 Кордината по оси У от верхнего левого угла
 */


SSD1306_Error_t ssd1306_InvertRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2);

void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color);

/**
 * @brief Sets the contrast of the display.
 * @param[in] value contrast to set.
 * @note Contrast increases as the value increases.
 * @note RESET = 7Fh.
 */
void ssd1306_SetContrast(const uint8_t value);

/**
 * @brief Set Display ON/OFF.
 * @param[in] on 0 for OF F, any for ON.
 */
void ssd1306_SetDisplayOn(const uint8_t on);

/**
 * @brief Reads DisplayOn state.
 * @return  0: OFF.
 *          1: ON.
 */
uint8_t ssd1306_GetDisplayOn();

// Low-level procedures
void ssd1306_WriteCommand(uint8_t byte);
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size);
SSD1306_Error_t ssd1306_FillBuffer(uint8_t* buf, uint32_t len);

_END_STD_C

#endif // __SSD1306_H__
